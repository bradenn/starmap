<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Star Map</title>
</head>
<style>* {
        padding: 0;
        margin: 0
    }</style>
<script src="/pixi/pixi.min.js"></script>
<body>
<script type="text/javascript">
    const app = new PIXI.Application();
    document.body.appendChild(app.view);


    const starTextures = [PIXI.Texture.from('images/1.png'), PIXI.Texture.from('images/2.png'), PIXI.Texture.from('images/3.png'), PIXI.Texture.from('images/4.png'), PIXI.Texture.from('images/5.png')];

    const starAmount = 1000;
    let cameraZ = 0;
    const fov = 35;
    const baseSpeed = 0.05;
    let speed = 0;
    let warpSpeed = 0;
    const starStretch = 3;
    const starBaseSize = 0.025;

    const stars = [];
    for (let i = 0; i < starAmount; i++) {
        const star = {
            sprite: new PIXI.Sprite(starTextures[Math.ceil(Math.random() * 10)]),
            z: 0,
            x: 0,
            y: 0,
        };
        star.sprite.anchor.x = 0.5;
        star.sprite.anchor.y = 0.7;
        randomizeStar(star, true);
        app.stage.addChild(star.sprite);
        stars.push(star);
    }

    setInterval(() => {
        warp();
    }, 5500)

    function warp() {
        warpSpeed = 2;
        setTimeout(() => {
            warpSpeed = 0;
            showTarget();
        }, 4000);
    }

    function showTarget(){
        let targetStar = new PIXI.AnimatedSprite(starTextures[2]);
        targetStar.anchor.set(0.5);
        targetStar.scale.set(1);
        targetStar.animationSpeed = 0.5;
        targetStar.x = app.renderer.screen.width / 2;
        targetStar.y = app.renderer.screen.height / 2;
        targetStar.play();
        app.stage.addChild(targetStar);
        app.start();
    }

    function randomizeStar(star, initial) {
        star.z = initial ? Math.random() * 2000 : cameraZ + Math.random() * 1000 + 2000;

        const deg = Math.random() * Math.PI * 2;
        const distance = Math.random() * 50 + 1;
        star.x = Math.cos(deg) * distance;
        star.y = Math.sin(deg) * distance;
    }

    // Change flight speed every 5 seconds


    app.ticker.add((delta) => {
        // Simple easing. This should be changed to proper easing function when used for real.
        speed += (warpSpeed - speed) / 20;
        cameraZ += delta * 10 * (speed + baseSpeed);
        for (let i = 0; i < starAmount; i++) {
            const star = stars[i];
            if (star.z < cameraZ) randomizeStar(star);

            // Map star 3d position to 2d with really simple projection
            const z = star.z - cameraZ + 10;
            star.sprite.x = star.x * (fov / z) * app.renderer.screen.width + app.renderer.screen.width / 2;
            star.sprite.y = star.y * (fov / z) * app.renderer.screen.width + app.renderer.screen.height / 2;

            // Calculate star scale & rotation.
            const dxCenter = star.sprite.x - app.renderer.screen.width / 2;
            const dyCenter = star.sprite.y - app.renderer.screen.height / 2;
            const distanceCenter = Math.sqrt(dxCenter * dxCenter + dyCenter * dyCenter);
            const distanceScale = Math.max(0, (2000 - z) / 2000);
            star.sprite.scale.x = (distanceScale * starBaseSize) * 0.8;
            // Star is looking towards center so that y axis is towards center.
            // Scale the star depending on how fast we are moving, what the stretchfactor is and depending on how far away it is from the center.
            star.sprite.tint = 0xFFFFFF;
            star.sprite.scale.y = distanceScale * starBaseSize + distanceScale * speed * starStretch * distanceCenter / app.renderer.screen.width;
            star.sprite.rotation = Math.atan2(dyCenter, dxCenter) + Math.PI / 2;
        }
    });
    app.renderer.view.style.position = "absolute";
    app.renderer.view.style.display = "block";
    app.renderer.autoResize = true;
    app.renderer.resize(window.innerWidth, window.innerHeight);
    //Add the canvas that Pixi automatically created for you to the HTML document
</script>
</body>
</html>
