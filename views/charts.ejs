<!doctype html>
<html lang="en">
<%- include('partials/header.ejs') %>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"
        integrity="sha256-t9UJPrESBeG2ojKTIcFLPGF7nHi2vEc7f5A2KpH/UBU=" crossorigin="anonymous"></script>
<body>
<div class="flex-container">
    <div class="flex-container-element card">
        <canvas id="lum" width="400" height="400"></canvas>
    </div>
    <div class="flex-container-element card">
        <canvas id="age" width="400" height="400"></canvas>
    </div>
    <div class="flex-container-element card">
        <canvas id="dist" width="400" height="400"></canvas>
    </div>
    <div class="flex-container-element card">
        <canvas id="ant" width="400" height="400"></canvas>
    </div>
    <div class="flex-container-element card">
        <canvas id="planets" width="400" height="400"></canvas>
    </div>
    <div class="flex-container-element card">
        <canvas id="pressure" width="400" height="400"></canvas>
    </div>
</div>
</body>
<%
function map(value, min, max) {
    let low1 = min;
    let high1 = max;
    let low2 = 0.5;
    let high2 = 2;
    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);
}
%>
<script>

    let data = JSON.parse(`<%- JSON.stringify(stars) %>`);
    let pdata = JSON.parse(`<%- JSON.stringify(planets) %>`);

    function buildDataset() {

        return pdata.map(ln => {
            return {x: ln.orbitalPeriod, y: ln.distanceToArrival}
        })

    }

    function getAgeToBrightnessData() {
        return data.map(ln => {
            return {x: ln.age, y: ln.absoluteMagnitude}
        })
    }

    function getDistData() {
        return data.map(ln => {
            return {x: ln.absoluteMagnitude, y: ln.surfaceTemperature}
        })
    }

    function getBodies() {
        return data.map(ln => {
            return {x: ln.bodyCount, y: ln.rotationalPeriod}
        })
    }

    function getPlanetData() {
        return pdata.map(ln => {
            return {x: ln.gravity, y: ln.radius, label: ln.type}
        })
    }

    function getPressureData() {
        return pdata.map(ln => {
            if (ln.surfacePressure !== "null" && ln.surfacePressure !== "0") {
                return {x: ln.surfaceTemperature, y: ln.surfacePressure}
            } else {
                return null
            }
        }).filter(ln => ln !== null)
    }

    let pressure = document.getElementById('pressure');
    let myPressureChart = new Chart(pressure, {
        type: 'scatter',
        data: {
            datasets: [{
                label: 'Planets',
                borderColor: '#9b59b6',
                backgroundColor: '#8e44ad',
                data: getPressureData()
            }],
        },
        options: {
            legend: {},
            scales: {
                xAxes: [{
                    type: 'logarithmic',
                    position: 'bottom',
                    scaleLabel: {
                        display: true,
                        labelString: 'surfaceTemperature [Log]'
                    }
                }],
                yAxes: [{
                    type: 'logarithmic',
                    position: 'left',
                    scaleLabel: {
                        display: true,
                        labelString: 'surfacePressure [Log]'
                    }
                }]
            },
            title: {
                display: true,
                text: 'surfaceTemperature x surfacePressure'
            }
        }
    });

    let planets = document.getElementById('planets');
    let myplanetsChart = new Chart(planets, {
        type: 'scatter',
        data: {
            datasets: [{
                label: 'Planets',
                borderColor: '#2ecc71',
                backgroundColor: '#27ae60',
                data: getPlanetData()
            }],
        },
        options: {
            legend: {},
            scales: {
                xAxes: [{
                    type: 'logarithmic',
                    position: 'bottom',
                    scaleLabel: {
                        display: true,
                        labelString: 'gravity [Log]'
                    }
                }],
                yAxes: [{
                    type: 'logarithmic',
                    position: 'left',
                    scaleLabel: {
                        display: true,
                        labelString: 'radius [Log]'
                    }
                }]
            },
            title: {
                display: true,
                text: 'gravity x radius'
            }
        }
    });

    let ant = document.getElementById('ant');
    let myAntChart = new Chart(ant, {
        type: 'scatter',
        data: {
            datasets: [{
                label: 'rotationalPeriod',
                borderColor: '#c0392b',
                backgroundColor: '#e74c3c',
                data: getBodies(),
                yAxisID: "y-axis-1",
            },
                {
                    label: 'solarRadius',
                    borderColor: '#2980b9',
                    backgroundColor: '#3498db',
                    data: data.map(ln => {
                        return {x: ln.bodyCount, y: ln.solarRadius}
                    }),
                    yAxisID: "y-axis-2",
                }
            ],
        },
        options: {
            legend: {},
            scales: {
                xAxes: [{
                    type: 'logarithmic',
                    position: 'bottom',
                    scaleLabel: {
                        display: true,
                        labelString: 'bodyCount (ABS) [Log]'
                    }
                }],
                yAxes: [{
                    type: 'logarithmic',
                    position: 'left',
                    scaleLabel: {
                        display: true,
                        labelString: 'rotationalPeriod [Log]'
                    },
                    id: "y-axis-1",
                }, {
                    type: 'logarithmic',
                    position: 'right',
                    scaleLabel: {
                        display: true,
                        labelString: 'solarMasses [Log]'
                    },
                    yAxisID: "y-axis-2",
                }]
            },
            title: {
                display: true,
                text: 'bodyCount x rotationalPeriod x solarMasses'
            }
        }
    });

    let dist = document.getElementById('dist');
    let myDistChart = new Chart(dist, {
        type: 'scatter',
        data: {
            datasets: [{
                label: 'Stars',
                borderColor: '#f1c40f',
                backgroundColor: '#f39c12',
                data: getDistData()
            }],
        },
        options: {
            legend: {},
            scales: {
                xAxes: [{
                    type: 'linear',
                    position: 'bottom',
                    scaleLabel: {
                        display: true,
                        labelString: 'absoluteMagnitude (ABS) [Linear]'
                    }
                }],
                yAxes: [{
                    type: 'logarithmic',
                    position: 'left',
                    scaleLabel: {
                        display: true,
                        labelString: 'surfaceTemperature (K) [Log]'
                    }
                }],
                zAxes: [{
                    type: 'logarithmic',
                    position: 'right',
                    scaleLabel: {
                        display: true,
                        labelString: 'surfaceTemperature (K) [Log]'
                    }
                }]
            },
            title: {
                display: true,
                text: 'absoluteMagnitude x surfaceTemperature'
            }
        }
    });

    let age = document.getElementById('age');
    let myAgeChart = new Chart(age, {
        type: 'scatter',
        data: {
            datasets: [{
                label: 'Stars',
                borderColor: '#2980b9',
                backgroundColor: '#3498db',
                data: getAgeToBrightnessData()
            }],
        },
        options: {
            legend: {},
            scales: {
                xAxes: [{
                    type: 'linear',
                    position: 'bottom',
                    scaleLabel: {
                        display: true,
                        labelString: 'age (ABS) [Linear]'
                    }
                }],
                yAxes: [{
                    type: 'linear',
                    position: 'left',
                    scaleLabel: {
                        display: true,
                        labelString: 'absoluteMagnitude (ABS) [Linear]'
                    }
                }]
            },
            title: {
                display: true,
                text: 'age x absoluteMagnitude'
            }
        }
    });

    let ctx = document.getElementById('lum');
    let myDoughnutChart = new Chart(ctx, {
        type: 'scatter',
        data: {
            datasets: [{
                label: 'Planets',
                borderColor: '#16a085',
                backgroundColor: '#1abc9c',
                data: buildDataset()
            }],
        },
        options: {
            legend: {},
            scales: {
                xAxes: [{
                    type: 'logarithmic',
                    position: 'bottom',
                    scaleLabel: {
                        display: true,
                        labelString: 'orbitalPeriod [Logarithmic]'
                    }
                }],
                yAxes: [{
                    type: 'logarithmic',
                    position: 'left',
                    scaleLabel: {
                        display: true,
                        labelString: 'distanceToArrival [Logarithmic]'
                    }
                }]
            },
            title: {
                display: true,
                text: 'orbitalPeriod x distanceToArrival'
            }
        }
    });
</script>
</html>
